import numpy as np

from pylibxc import LibXCFunctional
import pylibxc.flags as xc_flags

from quantum_masala.core import GField, RField, rho_check, deloper
from quantum_masala import config, pw_logger


def _get_sigma(rhoaux: GField) -> np.ndarray:
    r"""Generates the contracted gradient 'sigma' of input electron density.
    Required by libxc for computing potentials for GGA Functionals.

    Parameters
    ----------
    rhoaux : GField
        Input Electron Density

    Returns
    -------
    sigma_r : np.ndarray
        'sigma' array to be passed to `pylibxc.LibXCFunctional` for evaluating
        GGA Functional

    Notes
    -----
    Refer to the `libxc manual`_ for further details

    .. _libxc manual: https://www.tddft.org/programs/libxc/manual/libxc-5.1.x/
    """
    grho = rhoaux.gspc
    numspin = rhoaux.shape[0]
    grad_rhoaux = deloper.compute_grad(rhoaux).to_rfield()

    sigma_r = np.empty((2*numspin - 1, *grho.grid_shape), dtype='f8')
    sigma_r[0] = np.sum(grad_rhoaux.r[0] * grad_rhoaux.r[0], axis=0).real
    if numspin == 2:
        sigma_r[1] = np.sum(grad_rhoaux.r[0]*grad_rhoaux.r[1], axis=0).real
        sigma_r[2] = np.sum(grad_rhoaux.r[1]*grad_rhoaux.r[1], axis=0).real

    return np.copy(sigma_r.reshape(sigma_r.shape[0], -1).T, order='C')


@pw_logger.time('xc_compute')
def xc_compute(rho: GField, rhocore: GField,
               exch_name: str, corr_name: str) -> tuple[RField, float]:
    """Computes the XC Potential generated by input charge density.

    The XC functional is specified by ``exch_name`` and ``corr_name``. The core
    charge density ``rhocore`` is required for Non-local Core correction.

    Parameters
    ----------
    rho : GField
        Input electron density
    rhocore : GField
        Core electron density. Generated from pseudopotential data
    exch_name : str
        Name of Exchange Functional
    corr_name : str
        Name of Correlation Functional

    Returns
    -------
    v_xc : GField
        XC Potential
    en_xc : float
        Contribution of XC Potential to total energy (per unit cell)
    """
    rho_check(rho)
    rho_check(rhocore)
    if rho.gspc != rhocore.gspc:
        raise ValueError("'gspc' between 'rho' and 'rho_core' must be equal.")

    grho = rho.gspc
    numspin = rho.shape[0]
    rhoaux = rho + (1/numspin)*rhocore


    xc_spin = "unpolarized" if numspin == 1 else "polarized"
    exch_func = LibXCFunctional(exch_name, xc_spin)
    corr_func = LibXCFunctional(corr_name, xc_spin)

    need_grad = sum(
        True if xcfunc.get_family() in
        [xc_flags.XC_FAMILY_GGA, xc_flags.XC_FAMILY_HYB_GGA]
        else False
        for xcfunc in [exch_func, corr_func]
    )
    grad_rho = None
    if need_grad:
        grad_rho = deloper.compute_grad(rho).to_rfield()

    # for xcfunc in [exch_func, corr_func]:
    #     if xcfunc.get_family() == xc_flags.XC_FAMILY_LDA:
    #         xcfunc.set_dens_threshold(config.libxc_thr_lda_rho)
    #     elif xcfunc.get_family() == xc_flags.XC_FAMILY_GGA:
    #         xcfunc.set_dens_threshold(config.libxc_thr_gga_rho)
    #         xcfunc.set_sigma_threshold(config.libxc_thr_gga_sig)

    rho = rho.to_rfield()
    xc_inp = {"rho": np.copy(np.transpose(np.abs(rho.r).reshape(numspin, -1)), "C")}
    if need_grad:
        xc_inp["sigma"] = _get_sigma(rhoaux)

    v_xc = RField.zeros(grho, numspin)
    en_xc = 0

    for xcfunc in [exch_func, corr_func]:
        xcfunc_out = xcfunc.compute(xc_inp)
        zk_r = xcfunc_out['zk'].reshape(grho.grid_shape)
        v_r = np.reshape(xcfunc_out['vrho'].T, (numspin, *grho.grid_shape))
        v_xc.r[:] += v_r
        en_xc += rho.integrate(zk_r, axis=0).real

        if need_grad:
            vsig_r = np.reshape(xcfunc_out['vsigma'].T, (-1, *grho.grid_shape))
            h_r = np.empty((numspin, 3, *grho.grid_shape), dtype='c16')
            if numspin == 1:
                h_r[0] = 2*vsig_r[0]*grad_rho.r[0]
            else:
                h_r[0] = 2*vsig_r[0]*grad_rho.r[0] + vsig_r[1]*grad_rho.r[1]
                h_r[1] = 2*vsig_r[2]*grad_rho.r[1] + vsig_r[1]*grad_rho.r[0]
            h = RField.from_array(grho, h_r, copy_arr=False)
            h = h.to_gfield()
            div_h = deloper.compute_div(h).to_rfield()

            v_xc -= div_h

    return v_xc, en_xc.real

import numpy as np

from quantum_masala import pw_logger
from quantum_masala.core import GField, RField, rho_check


@pw_logger.time('hartree_compute')
def hartree_compute(rho: GField) -> tuple[RField, float]:
    """Computes the hartree potential generated by input density and its
    contribution to total energy

    Parameters
    ----------
    rho : GField
        Input electron density
    Returns
    -------
    v_hart : GField
        Hartree Potential. Has shape (1,) as it is spin-independent.
    en_hart : float
        Hartree contribution to total energy (per unit cell).
    """
    rho_check(rho)
    v_hart = GField.empty(rho.gspc, 1)
    v_hart.g[0, 0] = 0
    v_hart.g[0, 1:] = 4*np.pi * np.sum(rho.g, axis=0)[1:] / rho.gspc.norm2[1:]
    en_hart = 0.5 * np.vdot(np.sum(rho.g, axis=0), v_hart.g)
    en_hart *= rho.gspc.reallat_dv / np.prod(rho.gspc.grid_shape)

    v_hart = v_hart.to_rfield()
    return v_hart, en_hart.real
